import java.util.GregorianCalendar;

/**
 * @author Mia Watts
 * This class is a representation of time that will be used for JUnit testing and practice.
 * The class uses Java's GregorianCalendar import.
 */
public class Time {
    private int hours;
    private int minutes;
    private int seconds;

    /**
     * Basic constructor that gets the current time using a GregorianCalendar object.
     */
    public Time() {
        GregorianCalendar calendar = new GregorianCalendar();
        this.hours = calendar.get(GregorianCalendar.HOUR);
        this.minutes = calendar.get(GregorianCalendar.MINUTE);
        this.seconds = calendar.get(GregorianCalendar.SECOND);
    }

    /**
     * This is a filled constructor that accepts user input and updates the hours, minutes, and seconds to whatever the user wants.
     * @param hours - current hours.
     * @param minutes - current minutes.
     * @param seconds - current seconds.
     */
    public Time(int hours, int minutes, int seconds) {
        super();
        this.hours = hours;
        this.minutes = minutes;
        this.seconds = seconds;
    }

    /**
     * Getter method for the hours.
     * @return the hours
     */
    public int getHours() {
        return hours;
    }

    /**
     * Getter method for the minutes.
     * @return the minutes
     */
    public int getMinutes() {
        return minutes;
    }

    /**
     * Getter method for the seconds.
     * @return the seconds
     */
    public int getSeconds() {
        return seconds;
    }

    /**
     * Increments seconds by 1, then fixes the seconds using the fixSeconds() method.
     */
    public void incrementSeconds() {
        this.seconds++;
        fixSeconds();
    }

    /**
     * Fixes the seconds by setting them to 0 if 60 seconds has been reached, incrementing minutes by 1.
     */
    private void fixSeconds() {
        if(seconds == 60) {
            this.seconds = 0;
            this.incrementMinutes();
        }
    }

    /**
     * Increments minutes by 1, then fixes the minutes using the fixMinutes() method.
     */
    public void incrementMinutes() {
        this.minutes++;
        fixMinutes();
    }

    /**
     * Fixes the minutes by setting them to 0 if 60 minutes has been reached, incrementing hours by 1.
     */
    private void fixMinutes() {
        if(minutes == 60) {
            this.minutes = 0;
            this.incrementHours();
        }
    }

    /**
     * Increments hours by 1, then fixes the hours using the fixHours() method.
     */
    public void incrementHours() {
        this.hours++;
        fixHours();
    }

    /**
     * Fixes the hours by setting them to 0 if 24 hours has been reached.
     */
    private void fixHours() {
        if(hours == 24) {
            this.hours = 0;
        }
    }

    /**
     * This is an overridden equals method generated by Eclipse that solves the equals method issues in the TimeTest class.
     * The equals method before this one couldn't compare hours, minutes, and seconds properly, but this one can.
     */
    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        Time other = (Time) obj;
        return hours == other.hours && minutes == other.minutes && seconds == other.seconds;
    }

    /**
     * This is a toString() method that prints the current time in clock format: hours:minutes:seconds.
     */
    @Override
    public String toString() {
        return hours + ":" + minutes + ":" + seconds;
    }
}
